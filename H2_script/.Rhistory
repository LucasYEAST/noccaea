poly_sf <- st_as_sf(poly)
library(sp)
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
orderedbuffers
orderedbuffers <- buffers[order(buffers$Noise,decreasing=TRUE),]
# Plot buffers
plot(orderedbuffers["Noise"])
orderedbuffers
clippedbuffers <- st_difference(orderedbuffers)
clippedbuffers
orderedbuffers <- buffers[order(buffers$Noise,decreasing=FALSE),]
# Plot buffers
plot(orderedbuffers["Noise"])
clippedbuffers <- st_difference(orderedbuffers)
orderedbuffers
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
clippedbuffers
plot(clippedbuffers["Noise"])
orderedbuffers <- buffers[order(buffers$Noise,decreasing=FALSE),]
orderedbuffers
orderedbuffers <- buffers[order(buffers$Noise,decreasing=TRUE),]
clippedbuffers <- st_difference(orderedbuffers)
plot(clippedbuffers["Noise"])
clippedbuffers
clippedbuffers <- st_difference(st_geometry(orderedbuffers))
plot(clippedbuffers["Noise"])
clippedbuffers <- st_difference(orderedbuffers)
plot(clippedbuffers["Noise"])
clippedbuffers
?st_difference
clippedbuffers <- st_difference.sfc(orderedbuffers)
orderedbuffers <- buffers[order(buffers$Noise,decreasing=FALSE),]
clippedbuffers <- st_difference(orderedbuffers)
clippedbuffers
plot(clippedbuffers["Noise"])
orderedbuffers <- buffers[order(buffers$Noise,decreasing=TRUE),]
clippedbuffers <- st_difference(orderedbuffers)
clippedbuffers
orderedbuffers
a <- []
a <- list()
a
a <- list(c())
a
?append()
append(a, clippedbuffers[nrow(clippedbuffers),])
a[1]
a[2]
a[[1]]
a <- append(a, clippedbuffers[nrow(clippedbuffers),])
a
df <- data.frame()
df
rbind(orderedbuffers[1,],df)
df <- rbind(orderedbuffers[1,],df)
df
df$geometry
orderedbuffers
as.data.frame(orderedbuffers)
orderedbuffers_df <- as.data.frame(orderedbuffers)
orderedbuffers_df
class(orderedbuffers_df)
df <- rbind(df, orderedbuffers_df[1,])
df
df <- data.frame()
df <- rbind(df, orderedbuffers_df[1,])
df
df <- rbind(df, orderedbuffers_df[2,])
df
?remove()
orderedbuffers
rm(orderedbuffers[1,])
?data.frame
orderedbuffers
orderedbuffers[-1,]
orderedbuffers <- buffers[order(buffers$Noise,decreasing=TRUE),]
orderedbuffers
df <- data.frame()
orderedbuffers_df <- as.data.frame(orderedbuffers)
clipbuffers <- function(orderedbuffers_df, df){
# Subtracts polygons from ordered df.
# Order in df should be increasing from top to bottom
# Highest order polygon is preserved and subtracted from lower order polygons
lastrow_i <- nrow(orderedbuffers_df)
if (lastrow_i == 1){
df <- rbind(orderedbuffers_df, df)
return(orderedbuffers)
}
else{
# Move last row from input df to output df
lastrow <- orderedbuffers_df[lastrow_i,]
orderedbuffers_df <- orderedbuffers_df[-lastrow_i,]
df <- rbind(lastrow, df)
# Subtract lastrow polygon from rest of polygons
orderedbuffers_df <- st_difference(orderedbuffers_df, st_geometry(lastrow))
clipbuffers(orderedbuffers_df, df)
}
}
clippedbuffer_df <- clipbuffers(orderedbuffers_df, df)
clippedbuffer_df <- clipbuffers(orderedbuffers, df)
clippedbuffer_df <- clipbuffers(orderedbuffers, df)
orderedbuffers
quit()
q()
sf_df <- st_sf(st_sfc())
clippedbuffer_df <- clipbuffers(orderedbuffers, sf_df)
?ggplot
?aes
ggplot(data = clippedbuffer_df, aes(fill = Noise)) +
geom_sf()
library(ggplot2)
ggplot(data = clippedbuffer_df, aes(fill = Noise)) +
geom_sf()
ggplot(data = clippedbuffer_df, aes(fill = Noise)) +
geom_sf(alpha = 0.5)
clippedbuffer_df
sf_df
orderedbuffers <- buffers[order(buffers$Noise,decreasing=FALSE),]
sf_df <- st_sf(st_sfc())
clipbuffers <- function(orderedbuffers, sf_df){
# Subtracts polygons from ordered df.
# Order in df should be increasing from top to bottom
# Highest order polygon is preserved and subtracted from lower order polygons
lastrow_i <- nrow(orderedbuffers)
if (lastrow_i == 1){
sf_df <- rbind(orderedbuffers, sf_df)
return(sf_df)
}
else{
# Move last row from input df to output df
lastrow <- orderedbuffers[lastrow_i,]
orderedbuffers <- orderedbuffers[-lastrow_i,]
sf_df <- rbind(lastrow, sf_df)
# Subtract lastrow polygon from rest of polygons
orderedbuffers <- st_difference(orderedbuffers, st_geometry(lastrow))
clipbuffers(orderedbuffers, sf_df)
}
}
clippedbuffer_df <- clipbuffers(orderedbuffers, sf_df)
library(ggplot2)
ggplot(data = clippedbuffer_df, aes(fill = Noise)) +
geom_sf(alpha = 0.5)
clippedbuffer_df
clippedbuffer_df
clippedbuffer_df$area <- st_area(clippedbuffer_df)
clippedbuffer_df
ggplot(data = clippedbuffer_df) +
geom_sf(alpha = 0.5)
ggplot(data = clippedbuffer_df)
ggplot(data = clippedbuffer_df) +
geom_sf()
ggplot(data = clippedbuffer_df) +
geom_sf(alpha=0)
buffers <- rbind(circles,bigbuffers)
buffers$area
buffers$nothing
?st_union
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
ggplot(data = clippedbuffers) +
geom_sf(alpha=0)
plot(orderedcircles["Noise"])
ggplot(data = orderedbuffers) +
geom_sf(alpha=0)
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
ggplot(data = orderedbuffers) +
geom_sf(alpha=0)
buffers
?summarize
grouped_buffers <- buffers %>%
groupby(Noise) %>%
summarize()
?groupby
library(tidyverse)
install.packages(tidyverse)
library(dplyr)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
grouped_buffers <- buffers %>%
groupby(Noise) %>%
summarize()
?group_by
grouped_buffers <- buffers %>%
group_by(Noise) %>%
summarize()
grouped_buffers
class(grouped_buffers)
plot(st_geometry(grouped_buffers))
grouped_buffers <- group_buffers(buffers)
orderedbuffers <- buffers[order(Noise,decreasing=FALSE),]
?order
groupedOrderedBuffers <- grouped_buffers[order(grouped_buffers$Noise),]
grouped_buffers
group_buffers <- function(buffers){
grouped_buffers <- buffers %>%
group_by(Noise) %>%
summarize()
return(grouped_buffers)
}
grouped_buffers <- group_buffers(buffers)
groupedOrderedBuffers <- grouped_buffers[order(grouped_buffers$Noise),]
groupedOrderedBuffers
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
par(mfrow=c(1,2))
ggplot(data = clipped_grouped_buffers) +
geom_sf(alpha=0)
ggplot(data = clipped_buffers) +
geom_sf(alpha=0)
st_agr(buffers$geometry) = 'constant'
st_agr(geometry) = 'constant'
st_agr(buffers$geometry) = "constant"
?st_agr
class(buffers$geometry)
st_agr(buffers) = "constant"
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
points
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
rlang::last_error()
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
source('~/Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/scripts/polygon_operations.R')
library(shiny); runApp('Biosystems/Geoscripting/geoscripting-finalproject-r-mateys/main.R')
library(shiny); runApp('Biosystems/Geoscripting/geoscripting-finalproject-team-sierra/main.R')
shiny::runGist("2556d79d899f253c46ee830a3b1c5c15")
install.packages('gdal')
install.packages(gdal)
min(c(1,2))
CELL_D <- c(50, 100); # [mum]
DRY_FR <- c(3.7, 5); # [-]
k_DIFF <- c(0.1, 1); # mm**3 min**-1 mg**-1
RHO <- 1 # mg mm**-3
C_SUC_MEDIUM <- 30 / 342.3 # (g/L / g/mol ->) M
C_SUC_MEDIUM_mm3 <- C_SUC_MEDIUM * 10^-6 # mol mm**-3
calc_DW_per_mm2 <- function(dry_fr, r, rho){
(1/8)*(3/4) * r * rho * dry_fr
}
suc_uptake <- k_DIFF * C_SUC_MEDIUM_mm3 #mol min**-1 mg**-1
suc_uptake
DW_per_mm2_min <- calc_DW_per_mm2(DRY_FR, R_CELL, RHO)
R_CELL <- c(0.025,0.050) # mm
DW_per_mm2_min <- calc_DW_per_mm2(DRY_FR, R_CELL, RHO)
DW_per_mm2_min
pi
1.5**2 * pi
1.5**2
total_suc_uptake <- suc_uptake_mm * CULT_MINS * INFLOR_A
suc_uptake_mg <- k_DIFF * C_SUC_MEDIUM_mm3 #g min**-1 mg**-1
DW_per_mm2_min_max <- calc_DW_per_mm2(DRY_FR, R_CELL, RHO) # mg DW mm**-2
suc_uptake_mm <- suc_uptake * DW_per_mm2_min_max # g min**-1 mm**-2
total_suc_uptake <- suc_uptake_mm * CULT_MINS * INFLOR_A
CULTIVATION_DAYS <- 27
CULT_MINS <- CULTIVATION_DAYS * 24 * 60
INFLOR_A <- 1.5**2 * pi # mm2
total_suc_uptake <- suc_uptake_mm * CULT_MINS * INFLOR_A
total_suc_uptake
total_suc_uptake_inflor <- suc_uptake_mm * CULT_MINS * INFLOR_A # g
STEM_A <-5.5*3*pi # mm2 (from results, ID = 209)
suc_uptake_mm2 <- suc_uptake * DW_per_mm2_min_max # g min**-1 mm**-2
total_suc_uptake_inflor <- suc_uptake_mm2 * CULT_MINS * INFLOR_A # g
total_suc_uptake_inflor <- suc_uptake_mm2 * CULT_MINS * STEM_A # g
total_suc_uptake_inflor <- suc_uptake_mm2 * CULT_MINS * INFLOR_A # g
total_suc_uptake_stem <- suc_uptake_mm2 * CULT_MINS * STEM_A # g
total_suc_uptake_inflor
total_suc_uptake_stem
suc_uptake_mm2
suc_uptake_mm2 * CULT_MINS
TOM_carb <- TOM_carb_FW * TOM_FW
TOM_carb_FW <- 0.036 # g carbohydrate per g FreshWeight
TOM_carb <- TOM_carb_FW * TOM_FW
TOM_FW <- 62 #g
3/4 * 2.5**3 * pi
3/4 * 3**3 * pi
TOM_carb <- TOM_carb_FW * TOM_FW
TOM_carb
total_suc_uptake_stem
1200 * c(0.5612, 2.8506)
CELL_D <- c(50, 100); # [mum]
DRY_FR <- c(3.7, 5); # [-]
k_DIFF <- c(0.1, 1); # mm**3 min**-1 mg**-1
RHO <- 1 # mg mm**-3
C_SUC_MEDIUM <- 30 # g/L
C_SUC_MEDIUM_mm3 <- C_SUC_MEDIUM * 10^-6 #g mm**-3
R_CELL <- c(0.025,0.050) # mm
CULTIVATION_DAYS <- 27
CULT_MINS <- CULTIVATION_DAYS * 24 * 60
INFLOR_A <- 1.5**2 * pi # mm2
STEM_A <-5.5*3*pi # mm2 (from results, ID = 209)
TOM_carb_FW <- 0.036 # g carbohydrate per g FreshWeight
TOM_FW <- 62 #g (diameter is about 6cm here, quite big)
TOM_carb <- TOM_carb_FW * TOM_FW
calc_DW_per_mm2 <- function(dry_fr, r, rho){
(1/8)*(3/4) * r * rho * dry_fr
}
suc_uptake_mg <- k_DIFF * C_SUC_MEDIUM_mm3 #g min**-1 mg**-1
DW_per_mm2_min_max <- calc_DW_per_mm2(DRY_FR, R_CELL, RHO) # mg DW mm**-2
suc_uptake_mm2 <- suc_uptake * DW_per_mm2_min_max # g min**-1 mm**-2
suc_uptake
suc_uptake_g
suc_uptake_g <- k_DIFF * C_SUC_MEDIUM_mm3 #g min**-1 mg**-1
suc_uptake_mm2 <- suc_uptake_g * DW_per_mm2_min_max # g min**-1 mm**-2
total_suc_uptake_inflor <- suc_uptake_mm2 * CULT_MINS * INFLOR_A # g
total_suc_uptake_stem <- suc_uptake_mm2 * CULT_MINS * STEM_A # g
total_suc_uptake_inflor
total_suc_uptake_stem
TOM_carb
TOM_FW <- 60 #g (diameter is about 6cm here, quite big)
TOM_carb <- TOM_carb_FW * TOM_FW
TOM_carb_FW <- 0.036 # g carbohydrate per g FreshWeight
TOM_carb_efficiency <- 0.65
TOM_FW <- 60 #g (diameter is about 6cm here, quite big)
TOM_carb <- (TOM_carb_FW / TOM_carb_efficiency) * TOM_FW
0.036*0.65
0.036*65
suc_uptake_mm2 <- suc_uptake_g * DW_per_mm2_min_max # g min**-1 mm**-2
suc_uptake_mm2
TOM_FW <- 62 #g (diameter is about 6cm here, quite big)
TOM_FW <- 62 #g (diameter is about 6cm here, quite big)
TOM_carb <- (TOM_carb_FW / TOM_carb_efficiency) * TOM_FW
TOM_carb
TOM_FW*TOM_carb_FW
TOM_carb
area_needed <- TOM_carb / (CULT_MINS * suc_uptake_mm2)
area_needed
total_suc_uptake_stem <- suc_uptake_mm2 * CULT_MINS * STEM_A # g
total_suc_uptake_stem
calc_DW_per_mm2 <- function(dry_fr, r, rho){
(1/4)*(3/4) * r * rho * dry_fr
}
calc_DW_per_mm2 <- function(dry_fr, r, rho){
(1/4)*(3/4) * r * rho * dry_fr
}
suc_uptake_g <- k_DIFF * C_SUC_MEDIUM_mm3 #g min**-1 mg**-1
DW_per_mm2_min_max <- calc_DW_per_mm2(DRY_FR, R_CELL, RHO) # mg DW mm**-2
suc_uptake_mm2 <- suc_uptake_g * DW_per_mm2_min_max # g min**-1 mm**-2
total_suc_uptake_stem <- suc_uptake_mm2 * CULT_MINS * STEM_A # g
total_suc_uptake_inflor <- suc_uptake_mm2 * CULT_MINS * INFLOR_A # g
area_needed <- TOM_carb / (CULT_MINS * suc_uptake_mm2)
area_needed
mean(area_needed)
area_needed(1)
area_needed[1]
(area_needed[1] - area_needed[2]) /2
library(installr)
install.packages("installr")
install.packages("installr")
library(installr)
update.packages()
q()
if (!require("ggplot2")) install.packages("ggplot2")
library(ggplot2)
update.packages(ask = FALSE, checkBuilt = TRUE)
update.packages(ask = FALSE, checkBuilt = TRUE)
library(ggplot2)
ip <- as.data.frame(installed.packages())
View(ip)
View(ip)
sugar_co2 <- c(.5,.739)
tom_sucrose_DW <- 1100 # kg per kgDW set in BoR
tom_sucrose_FW <- tom_sucrose_DW * .045 # DW% 4.5
tom_sucrose_FW
sugar_co2 * tom_tot_carb
sugar_co2 * tom_sucrose_FW
tom_sucrose_DW <- 1.100 # kg per kgDW set in BoR
tom_sucrose_FW <- tom_sucrose_DW * .045 # DW% 4.5
sugar_co2 * tom_sucrose_FW
install.packages("BiocManager")
BiocManager::install("GO.db")
mget(c("GO:0042254"),org.Hs.egGO2ALLEGS)
help(GO.db)
mget(c("GO:0042254")
mget(c("GO:0042254"))
mget(c("GO:0042254"))
setwd("D:/Biosystems/internship/traditional_segmentation")
#installing packages
if (!require("doBy")) install.packages("doBy")
if (!require("lme4")) install.packages("lme4")
#calling packages
library("doBy")
library(lme4)
library(ggplot2)
input <- read.csv("data/Noccaea_CQsA500.csv", stringsAsFactors = T)
input <- input[input$batch != "",] # Removes unprocessed (batch 3 + root rows)
input$rep <- as.factor(input$Biological.replicate)
input$genotype <- as.factor(input$Accession..)
phenotypes <- c("plant_n_pix", "plant_meanC", "petiole", "margin", "vein", "tissue", "rand_5", "rand_10")
metals <- c("metal_Z", "metal_K", "metal_Ni", "metal_Ca")
metric <- "CQ"
results <- c()
source('D:/Biosystems/internship/traditional_segmentation/main.R', echo=TRUE)
hist(input$metal_Ca_rand_10_CQ)
source('D:/Biosystems/internship/traditional_segmentation/main.R', echo=TRUE)
source('D:/Biosystems/internship/traditional_segmentation/main.R', echo=TRUE)
source('D:/Biosystems/internship/traditional_segmentation/main.R', echo=TRUE)
source('D:/Biosystems/internship/traditional_segmentation/main.R', echo=TRUE)
source('D:/Biosystems/internship/traditional_segmentation/main.R', echo=TRUE)
library(lmtest)
if (!require("lmtest")) install.packages("lmtest")
library(lmtest)
bptest(fit)
x <- bptest(fit)
View(x)
View(x)
x.statistic
x["statistic"]
x["p.value"]
x["p.value"] < .05
source('D:/Biosystems/internship/traditional_segmentation/main.R', echo=TRUE)
?bptest
## generate a regressor
x <- rep(c(-1,1), 50)
## generate heteroskedastic and homoskedastic disturbances
err1 <- rnorm(100, sd=rep(c(1,2), 50))
err2 <- rnorm(100)
## generate a linear relationship
y1 <- 1 + x + err1
y2 <- 1 + x + err2
## perform Breusch-Pagan test
bptest(y1 ~ x)
bptest(y2 ~ x)
test
source('D:/Biosystems/internship/traditional_segmentation/main.R', echo=TRUE)
source('D:/Biosystems/internship/traditional_segmentation/main.R', echo=TRUE)
source('D:/Biosystems/internship/traditional_segmentation/main.R', echo=TRUE)
source('D:/Biosystems/internship/traditional_segmentation/main.R', echo=TRUE)
source('D:/Biosystems/internship/traditional_segmentation/main.R', echo=TRUE)
source('D:/Biosystems/internship/traditional_segmentation/main.R', echo=TRUE)
View(input)
View(input)
input$genotype
colnames <- c()
for (metal in metals){
for (current_phenotype in phenotypes){
if ((current_phenotype == "plant_n_pix") | (current_phenotype == "plant_meanC")){
colname <- paste(metal, current_phenotype, sep = "_")
}
else{
colname <- paste(metal, current_phenotype, metric, sep = "_")
}
colnames <- append(colnames, colname)
}
}
colnames
colnames <- append(colnames, "genotype")
rep_input <- input[colnames]
View(rep_input)
View(rep_input)
colnames <- c("genotype")
for (metal in metals){
for (current_phenotype in phenotypes){
if ((current_phenotype == "plant_n_pix") | (current_phenotype == "plant_meanC")){
colname <- paste(metal, current_phenotype, sep = "_")
}
else{
colname <- paste(metal, current_phenotype, metric, sep = "_")
}
colnames <- append(colnames, colname)
}
}
rep_input <- input[colnames]
View(rep_input)
View(rep_input)
write.csv("inputCQ_size_meanC.csv")
?write.csv
write.csv(rep_input,"inputCQ_size_meanC.csv")
setwd("D:/Biosystems/internship/traditional_segmentation/H2_script")
source('D:/Biosystems/internship/traditional_segmentation/H2_script/main.R', echo=TRUE)
source('D:/Biosystems/internship/traditional_segmentation/H2_script/main.R', echo=TRUE)
source('D:/Biosystems/internship/traditional_segmentation/H2_script/main.R', echo=TRUE)
